{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\z0040rue\\\\Documents\\\\sajat\\\\ferike\\\\mobil\\\\my-app\\\\node_modules\\\\react-native-complete-flatlist\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Highlighter from \"react-native-highlight-words\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\n\nvar CompleteFlatList = function (_React$Component) {\n  _inherits(CompleteFlatList, _React$Component);\n\n  var _super = _createSuper(CompleteFlatList);\n\n  function CompleteFlatList() {\n    var _this;\n\n    _classCallCheck(this, CompleteFlatList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.rowScale = new Animated.Value(0);\n    _this.slide = new Animated.Value(0);\n    _this.state = {\n      refreshing: false,\n      searchText: ''\n    };\n\n    _this.clearSearch = function () {\n      return _this.setState({\n        searchText: ''\n      }, _this.searchInput.clear);\n    };\n\n    _this.onRefresh = function () {\n      _this.props.pullToRefreshCallback();\n\n      _this.setState({\n        refreshing: true\n      });\n\n      setTimeout(function () {\n        return _this.setState({\n          refreshing: false\n        });\n      }, 7000);\n    };\n\n    _this.refresh = function () {\n      return _this.setState({\n        refreshing: false,\n        data: _this.props.data\n      });\n    };\n\n    _this.filterText = function () {\n      var _this$props = _this.props,\n          data = _this$props.data,\n          searchKey = _this$props.searchKey,\n          highlightColor = _this$props.highlightColor,\n          onSearch = _this$props.onSearch;\n      if (!_this.state.searchText || !!onSearch) return data;\n\n      var searchText = _this.state.searchText.toLowerCase();\n\n      var filteredData = [];\n\n      for (var d = 0; d < data.length; d++) {\n        dt = data[d];\n\n        for (var s = 0; s < searchKey.length; s++) {\n          sk = searchKey[s];\n          var target = dt[sk];\n          if (!target) continue;\n\n          if (target.toLowerCase().indexOf(searchText) !== -1) {\n            if (!highlightColor) {\n              filteredData.push(dt);\n              break;\n            }\n\n            var row = {};\n            row.cleanData = dt;\n            var keys = Object.keys(dt);\n\n            for (var i = 0; i < keys.length; i++) {\n              var key = keys[i];\n\n              if (typeof dt[key] === \"string\") {\n                row[key] = React.createElement(Highlighter, {\n                  highlightStyle: {\n                    backgroundColor: highlightColor\n                  },\n                  searchWords: [searchText],\n                  textToHighlight: dt[key],\n                  __self: _assertThisInitialized(_this),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 17\n                  }\n                });\n              }\n            }\n\n            filteredData.push(row);\n            break;\n          }\n        }\n      }\n\n      return filteredData;\n    };\n\n    _this.onScrollBeginDrag = function () {\n      Animated.spring(_this.rowScale, {\n        toValue: 5,\n        tension: 20,\n        useNativeDriver: true\n      }).start();\n    };\n\n    _this.onScrollEndDrag = function () {\n      Animated.spring(_this.rowScale, {\n        toValue: 1,\n        tension: 20,\n        useNativeDriver: true\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(CompleteFlatList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$pullToRef, _this$props2;\n\n      if (this.props.refreshOnLoad) (_this$props$pullToRef = (_this$props2 = this.props).pullToRefreshCallback) == null ? void 0 : _this$props$pullToRef.call(_this$props2);\n\n      if (this.props.slide != 'none') {\n        Animated.spring(this.slide, {\n          toValue: 1,\n          tension: 20,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          _renderItem = _this$props3.renderItem,\n          renderSeparator = _this$props3.renderSeparator,\n          pullToRefreshCallback = _this$props3.pullToRefreshCallback,\n          isRefreshing = _this$props3.isRefreshing,\n          isLoading = _this$props3.isLoading,\n          backgroundStyles = _this$props3.backgroundStyles,\n          searchBarBackgroundStyles = _this$props3.searchBarBackgroundStyles,\n          onSearch = _this$props3.onSearch,\n          placeholder = _this$props3.placeholder,\n          searchTextInputStyle = _this$props3.searchTextInputStyle,\n          showSearch = _this$props3.showSearch,\n          searchKey = _this$props3.searchKey,\n          isJelly = _this$props3.isJelly,\n          slide = _this$props3.slide;\n      var searchText = this.state.searchText;\n      var filteredData = this.filterText();\n      var scaleY = !isJelly ? 1 : this.rowScale.interpolate({\n        inputRange: [0, 5],\n        outputRange: [1, 0.9]\n      });\n      var jellyProps = isJelly ? {\n        onScrollBeginDrag: this.onScrollBeginDrag,\n        onScrollEndDrag: this.onScrollEndDrag\n      } : {};\n      var searchbar = React.createElement(View, {\n        style: [styles.searchBarContainer, searchBarBackgroundStyles],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, {\n        ref: function ref(c) {\n          return _this2.searchInput = c;\n        },\n        style: [styles.searchBar, searchTextInputStyle],\n        placeholder: placeholder,\n        clearButtonMode: \"while-editing\",\n        placeholderTextColor: \"#919188\",\n        underlineColorAndroid: \"transparent\",\n        autoCapitalize: \"none\",\n        keyboardType: \"email-address\",\n        onChangeText: function onChangeText(t) {\n          return _this2.setState({\n            searchText: t\n          });\n        },\n        value: searchText,\n        maxLength: 100,\n        returnKeyType: \"search\",\n        onSubmitEditing: function onSubmitEditing() {\n          return onSearch == null ? void 0 : onSearch(_this2.state.searchText);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }));\n      return React.createElement(View, {\n        style: [styles.container, backgroundStyles],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, showSearch && !!searchKey.length && searchbar, this.props.elementBetweenSearchAndList, React.createElement(FlatList, _extends({\n        ItemSeparatorComponent: renderSeparator,\n        ListEmptyComponent: React.createElement(Text, {\n          style: styles.noData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 31\n          }\n        }, \"No data available\"),\n        scrollEventThrottle: 16\n      }, this.props, jellyProps, {\n        refreshControl: !!onSearch ? React.createElement(RefreshControl, {\n          refreshing: isRefreshing || isLoading,\n          onRefresh: function onRefresh() {\n            return onSearch(searchText);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 26\n          }\n        }) : React.createElement(RefreshControl, {\n          refreshing: isRefreshing || isLoading,\n          onRefresh: pullToRefreshCallback,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }\n        }),\n        data: filteredData,\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item,\n              index = _ref.index,\n              separators = _ref.separators;\n          var translateX = slide == 'none' ? 0 : _this2.slide.interpolate({\n            inputRange: [0, 1],\n            outputRange: [(slide == 'right' ? 1 : -1) * ((index + 1) * 500), 0]\n          });\n          return React.createElement(Animated.View, {\n            style: {\n              transform: [{\n                scaleY: scaleY\n              }, {\n                translateX: translateX\n              }]\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 20\n            }\n          }, _renderItem({\n            item: item,\n            index: index,\n            separators: separators\n          }));\n        },\n        style: styles.flatList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return CompleteFlatList;\n}(React.Component);\n\nCompleteFlatList.defaultProps = {\n  searchKey: [],\n  placeholder: \"Search ...\",\n  data: [],\n  isRefreshing: false,\n  isLoading: false,\n  renderItem: null,\n  renderSeparator: function renderSeparator() {\n    return React.createElement(View, {\n      style: styles.defaultSeparator,\n      __self: CompleteFlatList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 28\n      }\n    });\n  },\n  pullToRefreshCallback: null,\n  onSearch: null,\n  highlightColor: '',\n  backgroundStyles: {},\n  searchTextInputStyle: {},\n  searchBarBackgroundStyles: {},\n  showSearch: true,\n  isJelly: false,\n  slide: 'none',\n  elementBetweenSearchAndList: null,\n  refreshOnLoad: true\n};\nvar styles = StyleSheet.create({\n  noData: {\n    alignSelf: \"center\",\n    textAlign: \"center\",\n    marginTop: 20\n  },\n  searchBarContainer: {\n    justifyContent: \"center\",\n    padding: 10,\n    backgroundColor: \"#f2f2f2\",\n    width: \"100%\"\n  },\n  searchBar: {\n    borderRadius: 5,\n    backgroundColor: \"white\",\n    height: 38,\n    fontSize: 15,\n    width: \"100%\",\n    paddingHorizontal: 10\n  },\n  container: {\n    flex: 1,\n    height: '100%',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    width: '100%'\n  },\n  defaultSeparator: {\n    height: 1,\n    width: \"80%\",\n    alignSelf: \"center\",\n    backgroundColor: \"#f2f2f2\"\n  },\n  flatList: {\n    height: \"100%\",\n    width: \"100%\",\n    backgroundColor: \"transparent\"\n  }\n});\nexport default CompleteFlatList;","map":{"version":3,"sources":["C:/Users/z0040rue/Documents/sajat/ferike/mobil/my-app/node_modules/react-native-complete-flatlist/index.js"],"names":["React","Highlighter","CompleteFlatList","rowScale","Animated","Value","slide","state","refreshing","searchText","clearSearch","setState","searchInput","clear","onRefresh","props","pullToRefreshCallback","setTimeout","refresh","data","filterText","searchKey","highlightColor","onSearch","toLowerCase","filteredData","d","length","dt","s","sk","target","indexOf","push","row","cleanData","keys","Object","i","key","backgroundColor","onScrollBeginDrag","spring","toValue","tension","useNativeDriver","start","onScrollEndDrag","refreshOnLoad","renderItem","renderSeparator","isRefreshing","isLoading","backgroundStyles","searchBarBackgroundStyles","placeholder","searchTextInputStyle","showSearch","isJelly","scaleY","interpolate","inputRange","outputRange","jellyProps","searchbar","styles","searchBarContainer","c","searchBar","t","container","elementBetweenSearchAndList","noData","item","index","separators","translateX","transform","flatList","Component","defaultProps","defaultSeparator","StyleSheet","create","alignSelf","textAlign","marginTop","justifyContent","padding","width","borderRadius","height","fontSize","paddingHorizontal","flex","alignItems"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;;;;;;;;IAWMC,gB;;;;;;;;;;;;;;;UACJC,Q,GAAW,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,C;UACXC,K,GAAQ,IAAIF,QAAQ,CAACC,KAAb,CAAmB,CAAnB,C;UACRE,K,GAAQ;AACNC,MAAAA,UAAU,EAAE,KADN;AAENC,MAAAA,UAAU,EAAE;AAFN,K;;UAsCRC,W,GAAc;AAAA,aAAM,MAAKC,QAAL,CAAc;AAAEF,QAAAA,UAAU,EAAE;AAAd,OAAd,EAAkC,MAAKG,WAAL,CAAiBC,KAAnD,CAAN;AAAA,K;;UAEdC,S,GAAY,YAAM;AAChB,YAAKC,KAAL,CAAWC,qBAAX;;AACA,YAAKL,QAAL,CAAc;AAAEH,QAAAA,UAAU,EAAE;AAAd,OAAd;;AACAS,MAAAA,UAAU,CAAC;AAAA,eAAM,MAAKN,QAAL,CAAc;AAAEH,UAAAA,UAAU,EAAE;AAAd,SAAd,CAAN;AAAA,OAAD,EAA6C,IAA7C,CAAV;AACD,K;;UAEDU,O,GAAU;AAAA,aAAM,MAAKP,QAAL,CAAc;AAAEH,QAAAA,UAAU,EAAE,KAAd;AAAqBW,QAAAA,IAAI,EAAE,MAAKJ,KAAL,CAAWI;AAAtC,OAAd,CAAN;AAAA,K;;UAEVC,U,GAAa,YAAM;AACjB,wBAAsD,MAAKL,KAA3D;AAAA,UAAQI,IAAR,eAAQA,IAAR;AAAA,UAAcE,SAAd,eAAcA,SAAd;AAAA,UAAyBC,cAAzB,eAAyBA,cAAzB;AAAA,UAAyCC,QAAzC,eAAyCA,QAAzC;AACA,UAAI,CAAC,MAAKhB,KAAL,CAAWE,UAAZ,IAA0B,CAAC,CAACc,QAAhC,EAA0C,OAAOJ,IAAP;;AAE1C,UAAMV,UAAU,GAAG,MAAKF,KAAL,CAAWE,UAAX,CAAsBe,WAAtB,EAAnB;;AACA,UAAMC,YAAY,GAAG,EAArB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCE,QAAAA,EAAE,GAAGT,IAAI,CAACO,CAAD,CAAT;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACM,MAA9B,EAAsCE,CAAC,EAAvC,EAA2C;AACzCC,UAAAA,EAAE,GAAGT,SAAS,CAACQ,CAAD,CAAd;AACA,cAAME,MAAM,GAAGH,EAAE,CAACE,EAAD,CAAjB;AACA,cAAI,CAACC,MAAL,EAAa;;AAEb,cAAIA,MAAM,CAACP,WAAP,GAAqBQ,OAArB,CAA6BvB,UAA7B,MAA6C,CAAC,CAAlD,EAAqD;AACnD,gBAAI,CAACa,cAAL,EAAqB;AACnBG,cAAAA,YAAY,CAACQ,IAAb,CAAkBL,EAAlB;AACA;AACD;;AACD,gBAAMM,GAAG,GAAG,EAAZ;AACAA,YAAAA,GAAG,CAACC,SAAJ,GAAgBP,EAAhB;AACA,gBAAMQ,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYR,EAAZ,CAAb;;AACA,iBAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACT,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC;AACpC,kBAAMC,GAAG,GAAGH,IAAI,CAACE,CAAD,CAAhB;;AACA,kBAAI,OAAOV,EAAE,CAACW,GAAD,CAAT,KAAmB,QAAvB,EAAiC;AAC/BL,gBAAAA,GAAG,CAACK,GAAD,CAAH,GACE,oBAAC,WAAD;AACE,kBAAA,cAAc,EAAE;AAAEC,oBAAAA,eAAe,EAAElB;AAAnB,mBADlB;AAEE,kBAAA,WAAW,EAAE,CAACb,UAAD,CAFf;AAGE,kBAAA,eAAe,EAAEmB,EAAE,CAACW,GAAD,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF;AAOD;AACF;;AACDd,YAAAA,YAAY,CAACQ,IAAb,CAAkBC,GAAlB;AACA;AACD;AACF;AACF;;AACD,aAAOT,YAAP;AACD,K;;UAEDgB,iB,GAAoB,YAAM;AACxBrC,MAAAA,QAAQ,CAACsC,MAAT,CAAgB,MAAKvC,QAArB,EAA+B;AAC7BwC,QAAAA,OAAO,EAAE,CADoB;AAE7BC,QAAAA,OAAO,EAAE,EAFoB;AAG7BC,QAAAA,eAAe,EAAE;AAHY,OAA/B,EAIGC,KAJH;AAKD,K;;UAEDC,e,GAAkB,YAAM;AACtB3C,MAAAA,QAAQ,CAACsC,MAAT,CAAgB,MAAKvC,QAArB,EAA+B;AAC7BwC,QAAAA,OAAO,EAAE,CADoB;AAE7BC,QAAAA,OAAO,EAAE,EAFoB;AAG7BC,QAAAA,eAAe,EAAE;AAHY,OAA/B,EAIGC,KAJH;AAKD,K;;;;;;;WA7ED,6BAAoB;AAAA;;AAClB,UAAI,KAAK/B,KAAL,CAAWiC,aAAf,EAA8B,8CAAKjC,KAAL,EAAWC,qBAAX;;AAE9B,UAAI,KAAKD,KAAL,CAAWT,KAAX,IAAoB,MAAxB,EAAgC;AAC9BF,QAAAA,QAAQ,CAACsC,MAAT,CAAgB,KAAKpC,KAArB,EAA4B;AAC1BqC,UAAAA,OAAO,EAAE,CADiB;AAE1BC,UAAAA,OAAO,EAAE,EAFiB;AAG1BC,UAAAA,eAAe,EAAE;AAHS,SAA5B,EAIGC,KAJH;AAKD;AACF;;;WAqED,kBAAS;AAAA;;AACP,yBAeI,KAAK/B,KAfT;AAAA,UACEkC,WADF,gBACEA,UADF;AAAA,UAEEC,eAFF,gBAEEA,eAFF;AAAA,UAGElC,qBAHF,gBAGEA,qBAHF;AAAA,UAIEmC,YAJF,gBAIEA,YAJF;AAAA,UAKEC,SALF,gBAKEA,SALF;AAAA,UAMEC,gBANF,gBAMEA,gBANF;AAAA,UAOEC,yBAPF,gBAOEA,yBAPF;AAAA,UAQE/B,QARF,gBAQEA,QARF;AAAA,UASEgC,WATF,gBASEA,WATF;AAAA,UAUEC,oBAVF,gBAUEA,oBAVF;AAAA,UAWEC,UAXF,gBAWEA,UAXF;AAAA,UAYEpC,SAZF,gBAYEA,SAZF;AAAA,UAaEqC,OAbF,gBAaEA,OAbF;AAAA,UAcEpD,KAdF,gBAcEA,KAdF;AAgBA,UAAQG,UAAR,GAAuB,KAAKF,KAA5B,CAAQE,UAAR;AACA,UAAMgB,YAAY,GAAG,KAAKL,UAAL,EAArB;AAEA,UAAMuC,MAAM,GAAG,CAACD,OAAD,GAAW,CAAX,GAAe,KAAKvD,QAAL,CAAcyD,WAAd,CAA0B;AACtDC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD0C;AAEtDC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ;AAFyC,OAA1B,CAA9B;AAKA,UAAMC,UAAU,GAAGL,OAAO,GAAG;AAC3BjB,QAAAA,iBAAiB,EAAE,KAAKA,iBADG;AAE3BM,QAAAA,eAAe,EAAE,KAAKA;AAFK,OAAH,GAGtB,EAHJ;AAKA,UAAMiB,SAAS,GACb,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,kBAAR,EAA4BZ,yBAA5B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,GAAG,EAAE,aAAAa,CAAC;AAAA,iBAAI,MAAI,CAACvD,WAAL,GAAmBuD,CAAvB;AAAA,SADR;AAEE,QAAA,KAAK,EAAE,CAACF,MAAM,CAACG,SAAR,EAAmBZ,oBAAnB,CAFT;AAGE,QAAA,WAAW,EAAED,WAHf;AAIE,QAAA,eAAe,EAAC,eAJlB;AAKE,QAAA,oBAAoB,EAAC,SALvB;AAME,QAAA,qBAAqB,EAAC,aANxB;AAOE,QAAA,cAAc,EAAC,MAPjB;AAQE,QAAA,YAAY,EAAC,eARf;AASE,QAAA,YAAY,EAAE,sBAAAc,CAAC;AAAA,iBAAI,MAAI,CAAC1D,QAAL,CAAc;AAAEF,YAAAA,UAAU,EAAE4D;AAAd,WAAd,CAAJ;AAAA,SATjB;AAUE,QAAA,KAAK,EAAE5D,UAVT;AAWE,QAAA,SAAS,EAAE,GAXb;AAYE,QAAA,aAAa,EAAC,QAZhB;AAaE,QAAA,eAAe,EAAE;AAAA,iBAAMc,QAAN,oBAAMA,QAAQ,CAAG,MAAI,CAAChB,KAAL,CAAWE,UAAd,CAAd;AAAA,SAbnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAoBA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACwD,MAAM,CAACK,SAAR,EAAmBjB,gBAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACII,UAAU,IAAI,CAAC,CAACpC,SAAS,CAACM,MAA3B,IAAsCqC,SADzC,EAEG,KAAKjD,KAAL,CAAWwD,2BAFd,EAGE,oBAAC,QAAD;AACE,QAAA,sBAAsB,EAAErB,eAD1B;AAEE,QAAA,kBAAkB,EAAE,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEe,MAAM,CAACO,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFtB;AAGE,QAAA,mBAAmB,EAAE;AAHvB,SAIM,KAAKzD,KAJX,EAKMgD,UALN;AAME,QAAA,cAAc,EACZ,CAAC,CAACxC,QAAF,GAAa,oBAAC,cAAD;AAAgB,UAAA,UAAU,EAAE4B,YAAY,IAAIC,SAA5C;AAAuD,UAAA,SAAS,EAAE;AAAA,mBAAM7B,QAAQ,CAACd,UAAD,CAAd;AAAA,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAb,GACI,oBAAC,cAAD;AAAgB,UAAA,UAAU,EAAE0C,YAAY,IAAIC,SAA5C;AAAuD,UAAA,SAAS,EAAEpC,qBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARR;AAUE,QAAA,IAAI,EAAES,YAVR;AAWE,QAAA,UAAU,EAAE,0BAAiC;AAAA,cAA9BgD,IAA8B,QAA9BA,IAA8B;AAAA,cAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,cAAjBC,UAAiB,QAAjBA,UAAiB;AAC3C,cAAMC,UAAU,GAAGtE,KAAK,IAAI,MAAT,GAAkB,CAAlB,GAAsB,MAAI,CAACA,KAAL,CAAWsD,WAAX,CAAuB;AAC9DC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkD;AAE9DC,YAAAA,WAAW,EAAE,CAAE,CAACxD,KAAK,IAAI,OAAT,GAAmB,CAAnB,GAAuB,CAAC,CAAzB,KAA+B,CAACoE,KAAK,GAAG,CAAT,IAAc,GAA7C,CAAF,EAAsD,CAAtD;AAFiD,WAAvB,CAAzC;AAIA,iBAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,YAAA,KAAK,EAAE;AAAEG,cAAAA,SAAS,EAAE,CAAC;AAAElB,gBAAAA,MAAM,EAANA;AAAF,eAAD,EAAa;AAAEiB,gBAAAA,UAAU,EAAVA;AAAF,eAAb;AAAb,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAoE3B,WAAU,CAAC;AAAEwB,YAAAA,IAAI,EAAJA,IAAF;AAAQC,YAAAA,KAAK,EAALA,KAAR;AAAeC,YAAAA,UAAU,EAAVA;AAAf,WAAD,CAA9E,CAAP;AACD,SAjBH;AAkBE,QAAA,KAAK,EAAEV,MAAM,CAACa,QAlBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,CADF;AA0BD;;;;EAxL4B9E,KAAK,CAAC+E,S;;AAA/B7E,gB,CAQG8E,Y,GAAe;AACpB3D,EAAAA,SAAS,EAAE,EADS;AAEpBkC,EAAAA,WAAW,EAAE,YAFO;AAGpBpC,EAAAA,IAAI,EAAE,EAHc;AAIpBgC,EAAAA,YAAY,EAAE,KAJM;AAKpBC,EAAAA,SAAS,EAAE,KALS;AAMpBH,EAAAA,UAAU,EAAE,IANQ;AAOpBC,EAAAA,eAAe,EAAE;AAAA,WAAM,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEe,MAAM,CAACgB,gBAApB;AAAA,cAfrB/E,gBAeqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAN;AAAA,GAPG;AAQpBc,EAAAA,qBAAqB,EAAE,IARH;AASpBO,EAAAA,QAAQ,EAAE,IATU;AAUpBD,EAAAA,cAAc,EAAE,EAVI;AAWpB+B,EAAAA,gBAAgB,EAAE,EAXE;AAYpBG,EAAAA,oBAAoB,EAAE,EAZF;AAapBF,EAAAA,yBAAyB,EAAE,EAbP;AAcpBG,EAAAA,UAAU,EAAE,IAdQ;AAepBC,EAAAA,OAAO,EAAE,KAfW;AAgBpBpD,EAAAA,KAAK,EAAE,MAhBa;AAiBpBiE,EAAAA,2BAA2B,EAAE,IAjBT;AAkBpBvB,EAAAA,aAAa,EAAE;AAlBK,C;AAmLxB,IAAMiB,MAAM,GAAGiB,UAAU,CAACC,MAAX,CAAkB;AAC/BX,EAAAA,MAAM,EAAE;AAAEY,IAAAA,SAAS,EAAE,QAAb;AAAuBC,IAAAA,SAAS,EAAE,QAAlC;AAA4CC,IAAAA,SAAS,EAAE;AAAvD,GADuB;AAE/BpB,EAAAA,kBAAkB,EAAE;AAClBqB,IAAAA,cAAc,EAAE,QADE;AAElBC,IAAAA,OAAO,EAAE,EAFS;AAGlBhD,IAAAA,eAAe,EAAE,SAHC;AAIlBiD,IAAAA,KAAK,EAAE;AAJW,GAFW;AAQ/BrB,EAAAA,SAAS,EAAE;AACTsB,IAAAA,YAAY,EAAE,CADL;AAETlD,IAAAA,eAAe,EAAE,OAFR;AAGTmD,IAAAA,MAAM,EAAE,EAHC;AAITC,IAAAA,QAAQ,EAAE,EAJD;AAKTH,IAAAA,KAAK,EAAE,MALE;AAMTI,IAAAA,iBAAiB,EAAE;AANV,GARoB;AAgB/BvB,EAAAA,SAAS,EAAE;AACTwB,IAAAA,IAAI,EAAE,CADG;AAETH,IAAAA,MAAM,EAAE,MAFC;AAGTJ,IAAAA,cAAc,EAAE,QAHP;AAITQ,IAAAA,UAAU,EAAE,QAJH;AAKTvD,IAAAA,eAAe,EAAE,OALR;AAMTiD,IAAAA,KAAK,EAAE;AANE,GAhBoB;AAwB/BR,EAAAA,gBAAgB,EAAE;AAAEU,IAAAA,MAAM,EAAE,CAAV;AAAaF,IAAAA,KAAK,EAAE,KAApB;AAA2BL,IAAAA,SAAS,EAAE,QAAtC;AAAgD5C,IAAAA,eAAe,EAAE;AAAjE,GAxBa;AAyB/BsC,EAAAA,QAAQ,EAAE;AAAEa,IAAAA,MAAM,EAAE,MAAV;AAAkBF,IAAAA,KAAK,EAAE,MAAzB;AAAiCjD,IAAAA,eAAe,EAAE;AAAlD;AAzBqB,CAAlB,CAAf;AA4BA,eAAetC,gBAAf","sourcesContent":["import React from 'react';\nimport Highlighter from \"react-native-highlight-words\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  FlatList,\n  TextInput,\n  RefreshControl,\n  Animated,\n} from 'react-native';\n\nclass CompleteFlatList extends React.Component {\n  rowScale = new Animated.Value(0);\n  slide = new Animated.Value(0);\n  state = {\n    refreshing: false,\n    searchText: '',\n  };\n\n  static defaultProps = {\n    searchKey: [],\n    placeholder: \"Search ...\",\n    data: [],\n    isRefreshing: false,\n    isLoading: false,\n    renderItem: null,\n    renderSeparator: () => <View style={styles.defaultSeparator} />,\n    pullToRefreshCallback: null,\n    onSearch: null,\n    highlightColor: '',\n    backgroundStyles: {},\n    searchTextInputStyle: {},\n    searchBarBackgroundStyles: {},\n    showSearch: true,\n    isJelly: false,\n    slide: 'none',\n    elementBetweenSearchAndList: null,\n    refreshOnLoad: true,\n  };\n\n  componentDidMount() {\n    if (this.props.refreshOnLoad) this.props.pullToRefreshCallback?.();\n\n    if (this.props.slide != 'none') {\n      Animated.spring(this.slide, {\n        toValue: 1,\n        tension: 20,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  clearSearch = () => this.setState({ searchText: '' }, this.searchInput.clear)\n\n  onRefresh = () => {\n    this.props.pullToRefreshCallback();\n    this.setState({ refreshing: true });\n    setTimeout(() => this.setState({ refreshing: false }), 7000);\n  };\n\n  refresh = () => this.setState({ refreshing: false, data: this.props.data });\n\n  filterText = () => {\n    const { data, searchKey, highlightColor, onSearch } = this.props;\n    if (!this.state.searchText || !!onSearch) return data;\n\n    const searchText = this.state.searchText.toLowerCase();\n    const filteredData = [];\n    for (let d = 0; d < data.length; d++) {\n      dt = data[d];\n      for (let s = 0; s < searchKey.length; s++) {\n        sk = searchKey[s];\n        const target = dt[sk];\n        if (!target) continue;\n\n        if (target.toLowerCase().indexOf(searchText) !== -1) {\n          if (!highlightColor) {\n            filteredData.push(dt);\n            break;\n          }\n          const row = {};\n          row.cleanData = dt;\n          const keys = Object.keys(dt);\n          for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            if (typeof dt[key] === \"string\") {\n              row[key] = (\n                <Highlighter\n                  highlightStyle={{ backgroundColor: highlightColor }}\n                  searchWords={[searchText]}\n                  textToHighlight={dt[key]}\n                />\n              );\n            }\n          }\n          filteredData.push(row);\n          break;\n        }\n      }\n    }\n    return filteredData;\n  };\n\n  onScrollBeginDrag = () => {\n    Animated.spring(this.rowScale, {\n      toValue: 5,\n      tension: 20,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  onScrollEndDrag = () => {\n    Animated.spring(this.rowScale, {\n      toValue: 1,\n      tension: 20,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  render() {\n    const {\n      renderItem,\n      renderSeparator,\n      pullToRefreshCallback,\n      isRefreshing,\n      isLoading,\n      backgroundStyles,\n      searchBarBackgroundStyles,\n      onSearch,\n      placeholder,\n      searchTextInputStyle,\n      showSearch,\n      searchKey,\n      isJelly,\n      slide,\n    } = this.props;\n    const { searchText } = this.state;\n    const filteredData = this.filterText();\n\n    const scaleY = !isJelly ? 1 : this.rowScale.interpolate({\n      inputRange: [0, 5],\n      outputRange: [1, 0.9],\n    });\n\n    const jellyProps = isJelly ? {\n      onScrollBeginDrag: this.onScrollBeginDrag,\n      onScrollEndDrag: this.onScrollEndDrag,\n    } : {}\n\n    const searchbar = (\n      <View style={[styles.searchBarContainer, searchBarBackgroundStyles]}>\n        <TextInput\n          ref={c => this.searchInput = c}\n          style={[styles.searchBar, searchTextInputStyle]}\n          placeholder={placeholder}\n          clearButtonMode=\"while-editing\"\n          placeholderTextColor=\"#919188\"\n          underlineColorAndroid=\"transparent\"\n          autoCapitalize=\"none\"\n          keyboardType=\"email-address\"\n          onChangeText={t => this.setState({ searchText: t })}\n          value={searchText}\n          maxLength={100}\n          returnKeyType='search'\n          onSubmitEditing={() => onSearch?.(this.state.searchText)}\n        />\n      </View>\n    );\n\n    return (\n      <View style={[styles.container, backgroundStyles]}>\n        {(showSearch && !!searchKey.length) && searchbar}\n        {this.props.elementBetweenSearchAndList}\n        <FlatList\n          ItemSeparatorComponent={renderSeparator}\n          ListEmptyComponent={<Text style={styles.noData}>No data available</Text>}\n          scrollEventThrottle={16}\n          {...this.props}\n          {...jellyProps}\n          refreshControl={\n            !!onSearch ? <RefreshControl refreshing={isRefreshing || isLoading} onRefresh={() => onSearch(searchText)} />\n              : <RefreshControl refreshing={isRefreshing || isLoading} onRefresh={pullToRefreshCallback} />\n          }\n          data={filteredData}\n          renderItem={({ item, index, separators }) => {\n            const translateX = slide == 'none' ? 0 : this.slide.interpolate({\n              inputRange: [0, 1],\n              outputRange: [((slide == 'right' ? 1 : -1) * ((index + 1) * 500)), 0],\n            });\n            return <Animated.View style={{ transform: [{ scaleY }, { translateX }] }}>{renderItem({ item, index, separators })}</Animated.View>;\n          }}\n          style={styles.flatList}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  noData: { alignSelf: \"center\", textAlign: \"center\", marginTop: 20 },\n  searchBarContainer: {\n    justifyContent: \"center\",\n    padding: 10,\n    backgroundColor: \"#f2f2f2\",\n    width: \"100%\"\n  },\n  searchBar: {\n    borderRadius: 5,\n    backgroundColor: \"white\",\n    height: 38,\n    fontSize: 15,\n    width: \"100%\",\n    paddingHorizontal: 10\n  },\n  container: {\n    flex: 1,\n    height: '100%',\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    width: '100%',\n  },\n  defaultSeparator: { height: 1, width: \"80%\", alignSelf: \"center\", backgroundColor: \"#f2f2f2\" },\n  flatList: { height: \"100%\", width: \"100%\", backgroundColor: \"transparent\" }\n});\n\nexport default CompleteFlatList;"]},"metadata":{},"sourceType":"module"}